import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import AuthContext from './authContext';
import { useCookies } from "react-cookie";

function AuthProvider({ children }) {
  const [results, setResults] = useState([]);
  const [token, setToken] = useState();
  const [cookies] = useCookies(["csrftoken"]);

  useEffect(() => {
    const userToken = localStorage.getItem('user_token');
    if (userToken) setToken(userToken);
  }, []);

  async function signin(username, password) {
    const res = await fetch('http://201.49.62.134:8080/api-token-auth/', {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ username, password }),
    });

    const body = await res.json();
    if (body.token) {
      setToken(body.token);
      localStorage.setItem('user_token', body.token);
    } else {
      return body.non_field_errors[0];
    }
  }

  async function getAssets() {
    const response = await fetch('http://201.49.62.134:8080/api/assets/', {
      method: 'GET',
      headers: {
        Authorization: `Token ${token}`,
        Cookie: `csrftoken=${cookies.csrftoken}`
      },
      redirect: 'follow',
    });
    const resultApi = await response.json();
    setResults(resultApi.results);
  }

  function signout() {
    setToken(null);
  }


  return (
    <AuthContext.Provider
      value={{ results, token, signed: !!token, signin, getAssets, signout }}
    >
      {children}
    </AuthContext.Provider>
  );
}

AuthProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

export default AuthProvider;
