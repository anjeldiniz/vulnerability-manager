import React, { useEffect, useState } from 'react';
import Header from "../../components/Header/index";
import useAuth from '../../hooks/useAuth';
import moment from 'moment';
import * as C from './styles';
import Input from '../../components/Input';
import { FaAngleLeft, FaAngleRight } from 'react-icons/fa';

function Vulnerability() {
  const { token } = useAuth();
  const [filter, setFilter] = useState('');
  const [severity, setSeverity] = useState('');
  const [vulnerability, setVulnerability] = useState({});
  const [page, setPage] = useState(1);

  useEffect(() => {
    async function getVulnerability() {
      const response = await fetch(
        'http://201.49.62.134:8080/api/vulnerabilities/',
        {
          method: 'GET',
          headers: {
            Authorization: `Token ${token}`,
          },
        }
      );
      const resultApi = await response.json();
      setVulnerability(resultApi);
    }
    getVulnerability();
  }, [token]);

  async function handleNext() {
    const response = await fetch(vulnerability.next, {
      method: 'GET',
      headers: {
        Authorization: `Token ${token}`,
      },
    });
    const resultApi = await response.json();
    setVulnerability(resultApi);
    setPage(page + 1);
  }

  async function handlePrevious() {
    const response = await fetch(vulnerability.previous, {
      method: 'GET',
      headers: {
        Authorization: `Token ${token}`,
      },
    });
    const resultApi = await response.json();
    setVulnerability(resultApi);
    setPage(page - 1);
  }

  return (
    <>
      <Header />
        <C.ContainerPage>
          <FaAngleLeft
            disabled={!vulnerability.previous}
            Text="Previous"
            onClick={() => handlePrevious()}
          />
          <C.Title>{page}</C.Title>
          <FaAngleRight
            disabled={!vulnerability.next}
            Text="Next"
            onClick={() => handleNext()}
          />
        </C.ContainerPage>
        <C.Container>
          <C.ContainerPage>
            <Input
                type="text"
                placeholder="Search by name"
                value={filter}
                onChange={setFilter}
              />
              <C.Select defaultValue="" onChange={(e) => setSeverity(e.target.value)}>
                <option value="">Search for gravity</option>
                <option value="Médio">Médio</option>
                <option value="Alto">Alto</option>
                <option value="Crítico">Crítico</option>
              </C.Select>
          </C.ContainerPage>
          <C.Table>
              <tr>
                <C.Th>Name</C.Th>
                <C.Th>Gravity</C.Th>
                <C.Th>Cvss</C.Th>
                <C.Th>Asset Count</C.Th>
                <C.Th>Publication Date</C.Th>
              </tr>
            <tbody>
              {vulnerability.results
                ?.filter((e) =>
                  e.title.toLowerCase().includes(filter.toLowerCase())
                )
                .filter((e) => e.severity === severity || severity === '')
                .map((el, index) => (
                  <tr className="row" key={index}>
                    <C.Td>{el.title}</C.Td>
                    <C.Td>{el.severity}</C.Td>
                    <C.Td>{el.cvss}</C.Td>
                    <C.Td>{el.asset_count}</C.Td>
                    <C.Td>
                      {moment(el.publication_date).format('DD/MM/YYYY')}
                    </C.Td>
                  </tr>
                ))}
            </tbody>
          </C.Table>
        </C.Container>
    </>
  );
}

export default Vulnerability;
